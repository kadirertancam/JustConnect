#!/bin/bash\n\n# JustConnect V2 Backup Script\n# This script creates a comprehensive backup of the application\n\nset -e  # Exit on any error\n\n# Configuration\nAPP_NAME=\"justconnect-v2\"\nBACKUP_DIR=\"/var/backups/$APP_NAME\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_PATH=\"$BACKUP_DIR/$DATE\"\nRETENTION_DAYS=30\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Logging function\nlog() {\n    echo -e \"${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1\"\n}\n\nlog_success() {\n    echo -e \"${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] ✅ $1${NC}\"\n}\n\nlog_warning() {\n    echo -e \"${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] ⚠️  $1${NC}\"\n}\n\nlog_error() {\n    echo -e \"${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ❌ $1${NC}\"\n}\n\n# Check if running as root or with sudo\nif [[ $EUID -ne 0 ]]; then\n   log_error \"This script must be run as root or with sudo\"\n   exit 1\nfi\n\n# Create backup directory\nlog \"Creating backup directory: $BACKUP_PATH\"\nmkdir -p \"$BACKUP_PATH\"\n\n# Function to backup MongoDB\nbackup_mongodb() {\n    log \"Starting MongoDB backup...\"\n    \n    local mongo_backup_dir=\"$BACKUP_PATH/mongodb\"\n    mkdir -p \"$mongo_backup_dir\"\n    \n    # Check if MongoDB is running\n    if ! systemctl is-active --quiet mongod; then\n        log_warning \"MongoDB service is not running\"\n        return 1\n    fi\n    \n    # Backup using mongodump\n    if command -v mongodump >/dev/null 2>&1; then\n        mongodump --db justconnect_v2 --out \"$mongo_backup_dir\" --gzip\n        log_success \"MongoDB backup completed\"\n    else\n        log_error \"mongodump command not found\"\n        return 1\n    fi\n}\n\n# Function to backup Redis\nbackup_redis() {\n    log \"Starting Redis backup...\"\n    \n    local redis_backup_dir=\"$BACKUP_PATH/redis\"\n    mkdir -p \"$redis_backup_dir\"\n    \n    # Check if Redis is running\n    if ! systemctl is-active --quiet redis-server; then\n        log_warning \"Redis service is not running\"\n        return 1\n    fi\n    \n    # Copy Redis dump file\n    if [ -f /var/lib/redis/dump.rdb ]; then\n        cp /var/lib/redis/dump.rdb \"$redis_backup_dir/dump.rdb\"\n        log_success \"Redis backup completed\"\n    else\n        log_warning \"Redis dump file not found\"\n    fi\n}\n\n# Function to backup application files\nbackup_application() {\n    log \"Starting application files backup...\"\n    \n    local app_backup_dir=\"$BACKUP_PATH/application\"\n    mkdir -p \"$app_backup_dir\"\n    \n    # Backup uploaded files\n    if [ -d \"/var/www/$APP_NAME/uploads\" ]; then\n        log \"Backing up uploaded files...\"\n        tar -czf \"$app_backup_dir/uploads.tar.gz\" -C \"/var/www/$APP_NAME\" uploads\n        log_success \"Uploaded files backup completed\"\n    fi\n    \n    # Backup logs\n    if [ -d \"/var/www/$APP_NAME/logs\" ]; then\n        log \"Backing up log files...\"\n        tar -czf \"$app_backup_dir/logs.tar.gz\" -C \"/var/www/$APP_NAME\" logs\n        log_success \"Log files backup completed\"\n    fi\n    \n    # Backup configuration files\n    if [ -f \"/var/www/$APP_NAME/.env\" ]; then\n        log \"Backing up configuration files...\"\n        cp \"/var/www/$APP_NAME/.env\" \"$app_backup_dir/.env.backup\"\n        log_success \"Configuration backup completed\"\n    fi\n    \n    # Backup nginx configuration\n    if [ -f \"/etc/nginx/sites-available/$APP_NAME\" ]; then\n        log \"Backing up nginx configuration...\"\n        cp \"/etc/nginx/sites-available/$APP_NAME\" \"$app_backup_dir/nginx.conf\"\n        log_success \"Nginx configuration backup completed\"\n    fi\n    \n    # Backup PM2 ecosystem\n    if [ -f \"/var/www/$APP_NAME/ecosystem.config.js\" ]; then\n        cp \"/var/www/$APP_NAME/ecosystem.config.js\" \"$app_backup_dir/ecosystem.config.js\"\n        log_success \"PM2 ecosystem backup completed\"\n    fi\n}\n\n# Function to backup SSL certificates\nbackup_ssl() {\n    log \"Starting SSL certificates backup...\"\n    \n    local ssl_backup_dir=\"$BACKUP_PATH/ssl\"\n    mkdir -p \"$ssl_backup_dir\"\n    \n    # Backup Let's Encrypt certificates\n    if [ -d \"/etc/letsencrypt/live\" ]; then\n        tar -czf \"$ssl_backup_dir/letsencrypt.tar.gz\" -C \"/etc\" letsencrypt\n        log_success \"Let's Encrypt certificates backup completed\"\n    fi\n    \n    # Backup custom SSL certificates\n    if [ -d \"/etc/ssl/private\" ]; then\n        tar -czf \"$ssl_backup_dir/ssl-certs.tar.gz\" -C \"/etc/ssl\" private certs\n        log_success \"SSL certificates backup completed\"\n    fi\n}\n\n# Function to create backup manifest\ncreate_manifest() {\n    log \"Creating backup manifest...\"\n    \n    local manifest_file=\"$BACKUP_PATH/manifest.json\"\n    \n    cat > \"$manifest_file\" << EOF\n{\n  \"backup_date\": \"$DATE\",\n  \"application\": \"$APP_NAME\",\n  \"version\": \"2.0.0\",\n  \"backup_type\": \"full\",\n  \"components\": {\n    \"mongodb\": $([ -d \"$BACKUP_PATH/mongodb\" ] && echo \"true\" || echo \"false\"),\n    \"redis\": $([ -d \"$BACKUP_PATH/redis\" ] && echo \"true\" || echo \"false\"),\n    \"application_files\": $([ -d \"$BACKUP_PATH/application\" ] && echo \"true\" || echo \"false\"),\n    \"ssl_certificates\": $([ -d \"$BACKUP_PATH/ssl\" ] && echo \"true\" || echo \"false\")\n  },\n  \"backup_size\": \"$(du -sh $BACKUP_PATH | cut -f1)\",\n  \"server_info\": {\n    \"hostname\": \"$(hostname)\",\n    \"os\": \"$(lsb_release -d | cut -f2)\",\n    \"kernel\": \"$(uname -r)\"\n  }\n}\nEOF\n    \n    log_success \"Backup manifest created\"\n}\n\n# Function to compress backup\ncompress_backup() {\n    log \"Compressing backup...\"\n    \n    cd \"$BACKUP_DIR\"\n    tar -czf \"${DATE}.tar.gz\" \"$DATE\"\n    \n    if [ $? -eq 0 ]; then\n        rm -rf \"$DATE\"\n        log_success \"Backup compressed: ${DATE}.tar.gz\"\n    else\n        log_error \"Failed to compress backup\"\n        exit 1\n    fi\n}\n\n# Function to cleanup old backups\ncleanup_old_backups() {\n    log \"Cleaning up old backups (older than $RETENTION_DAYS days)...\"\n    \n    find \"$BACKUP_DIR\" -name \"*.tar.gz\" -type f -mtime +$RETENTION_DAYS -delete\n    \n    local deleted_count=$(find \"$BACKUP_DIR\" -name \"*.tar.gz\" -type f -mtime +$RETENTION_DAYS | wc -l)\n    \n    if [ $deleted_count -gt 0 ]; then\n        log_success \"Deleted $deleted_count old backup(s)\"\n    else\n        log \"No old backups to delete\"\n    fi\n}\n\n# Function to send notification (optional)\nsend_notification() {\n    local status=$1\n    local message=$2\n    \n    # You can implement notification here (email, Slack, etc.)\n    # Example with mail command:\n    # echo \"$message\" | mail -s \"JustConnect V2 Backup $status\" admin@example.com\n    \n    log \"Notification: $status - $message\"\n}\n\n# Main backup process\nmain() {\n    log \"Starting JustConnect V2 backup process...\"\n    log \"Backup will be saved to: $BACKUP_PATH\"\n    \n    local start_time=$(date +%s)\n    local backup_success=true\n    \n    # Perform backups\n    backup_mongodb || backup_success=false\n    backup_redis || backup_success=false\n    backup_application || backup_success=false\n    backup_ssl || backup_success=false\n    \n    # Create manifest\n    create_manifest\n    \n    # Compress backup\n    if [ \"$backup_success\" = true ]; then\n        compress_backup\n    else\n        log_warning \"Some backup components failed, but continuing...\"\n        compress_backup\n    fi\n    \n    # Cleanup old backups\n    cleanup_old_backups\n    \n    # Calculate backup time\n    local end_time=$(date +%s)\n    local duration=$((end_time - start_time))\n    \n    if [ \"$backup_success\" = true ]; then\n        log_success \"Backup completed successfully in ${duration}s\"\n        log_success \"Backup file: $BACKUP_DIR/${DATE}.tar.gz\"\n        send_notification \"SUCCESS\" \"Backup completed successfully in ${duration}s\"\n    else\n        log_warning \"Backup completed with warnings in ${duration}s\"\n        send_notification \"WARNING\" \"Backup completed with warnings in ${duration}s\"\n    fi\n    \n    # Display backup info\n    log \"Backup Information:\"\n    log \"  Size: $(du -sh $BACKUP_DIR/${DATE}.tar.gz | cut -f1)\"\n    log \"  Location: $BACKUP_DIR/${DATE}.tar.gz\"\n    log \"  Date: $(date)\"\n}\n\n# Handle script interruption\ntrap 'log_error \"Backup interrupted!\"; exit 1' INT TERM\n\n# Run main function\nmain\n\nexit 0