// MongoDB Initialization Script for Docker\n// This script runs when MongoDB container starts for the first time\n\nprint('Starting MongoDB initialization for JustConnect V2...');\n\n// Switch to application database\ndb = db.getSiblingDB('justconnect_v2');\n\n// Create application user\ndb.createUser({\n  user: 'justconnect_user',\n  pwd: 'justconnect_password_change_this',\n  roles: [\n    {\n      role: 'readWrite',\n      db: 'justconnect_v2'\n    }\n  ]\n});\n\nprint('Created application user: justconnect_user');\n\n// Create collections with validation\ndb.createCollection('users', {\n  validator: {\n    $jsonSchema: {\n      bsonType: 'object',\n      required: ['username', 'email', 'password'],\n      properties: {\n        username: {\n          bsonType: 'string',\n          minLength: 3,\n          maxLength: 30,\n          description: 'Username must be a string between 3-30 characters'\n        },\n        email: {\n          bsonType: 'string',\n          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$',\n          description: 'Email must be a valid email address'\n        },\n        password: {\n          bsonType: 'string',\n          minLength: 6,\n          description: 'Password must be at least 6 characters'\n        },\n        role: {\n          bsonType: 'string',\n          enum: ['user', 'moderator', 'admin'],\n          description: 'Role must be one of: user, moderator, admin'\n        },\n        status: {\n          bsonType: 'string',\n          enum: ['online', 'away', 'busy', 'offline'],\n          description: 'Status must be one of: online, away, busy, offline'\n        }\n      }\n    }\n  }\n});\n\nprint('Created users collection with validation');\n\ndb.createCollection('chats', {\n  validator: {\n    $jsonSchema: {\n      bsonType: 'object',\n      required: ['type', 'participants', 'createdBy'],\n      properties: {\n        type: {\n          bsonType: 'string',\n          enum: ['private', 'group', 'channel', 'broadcast'],\n          description: 'Chat type must be one of: private, group, channel, broadcast'\n        },\n        participants: {\n          bsonType: 'array',\n          minItems: 1,\n          description: 'Chat must have at least one participant'\n        }\n      }\n    }\n  }\n});\n\nprint('Created chats collection with validation');\n\ndb.createCollection('messages', {\n  validator: {\n    $jsonSchema: {\n      bsonType: 'object',\n      required: ['chat', 'sender', 'content'],\n      properties: {\n        content: {\n          bsonType: 'object',\n          required: ['type'],\n          properties: {\n            type: {\n              bsonType: 'string',\n              enum: ['text', 'image', 'video', 'audio', 'file', 'location', 'contact', 'sticker', 'gif'],\n              description: 'Message type must be valid'\n            }\n          }\n        }\n      }\n    }\n  }\n});\n\nprint('Created messages collection with validation');\n\n// Create indexes for better performance\nprint('Creating indexes...');\n\n// User indexes\ndb.users.createIndex({ 'username': 1 }, { unique: true });\ndb.users.createIndex({ 'email': 1 }, { unique: true });\ndb.users.createIndex({ 'status': 1 });\ndb.users.createIndex({ 'role': 1 });\ndb.users.createIndex({ 'isActive': 1 });\ndb.users.createIndex({ 'createdAt': -1 });\n\nprint('Created user indexes');\n\n// Chat indexes\ndb.chats.createIndex({ 'participants.user': 1 });\ndb.chats.createIndex({ 'type': 1 });\ndb.chats.createIndex({ 'lastActivity': -1 });\ndb.chats.createIndex({ 'createdBy': 1 });\ndb.chats.createIndex({ 'isDeleted': 1 });\ndb.chats.createIndex({ 'inviteCode': 1 }, { unique: true, sparse: true });\n\nprint('Created chat indexes');\n\n// Message indexes\ndb.messages.createIndex({ 'chat': 1, 'createdAt': -1 });\ndb.messages.createIndex({ 'sender': 1 });\ndb.messages.createIndex({ 'content.type': 1 });\ndb.messages.createIndex({ 'isDeleted': 1 });\ndb.messages.createIndex({ 'isPinned': 1 });\ndb.messages.createIndex({ 'createdAt': -1 });\ndb.messages.createIndex({ 'expiresAt': 1 }, { expireAfterSeconds: 0 });\n\nprint('Created message indexes');\n\n// Create text indexes for search\ndb.users.createIndex({\n  'username': 'text',\n  'firstName': 'text',\n  'lastName': 'text',\n  'email': 'text'\n}, {\n  name: 'user_search_index',\n  default_language: 'none'\n});\n\ndb.chats.createIndex({\n  'name': 'text',\n  'description': 'text'\n}, {\n  name: 'chat_search_index',\n  default_language: 'none'\n});\n\ndb.messages.createIndex({\n  'content.text': 'text'\n}, {\n  name: 'message_search_index',\n  default_language: 'none'\n});\n\nprint('Created text search indexes');\n\n// Insert default admin user (for development)\nif (db.users.countDocuments() === 0) {\n  print('Inserting default admin user...');\n  \n  db.users.insertOne({\n    username: 'admin',\n    email: 'admin@justconnect.com',\n    password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj3GofF5E1SG', // admin123\n    firstName: 'System',\n    lastName: 'Administrator',\n    role: 'admin',\n    status: 'offline',\n    isActive: true,\n    isVerified: true,\n    avatar: 'AD',\n    preferences: {\n      language: 'tr',\n      theme: 'dark',\n      notifications: {\n        email: true,\n        push: true,\n        sound: true\n      },\n      privacy: {\n        showLastSeen: true,\n        showOnlineStatus: true,\n        allowDirectMessages: true\n      }\n    },\n    contacts: [],\n    blockedUsers: [],\n    createdAt: new Date(),\n    updatedAt: new Date()\n  });\n  \n  print('Default admin user created (username: admin, password: admin123)');\n}\n\n// Create development sample data if in development mode\nif (process.env.NODE_ENV === 'development') {\n  print('Creating development sample data...');\n  \n  // Sample users\n  const sampleUsers = [\n    {\n      username: 'kadir',\n      email: 'kadir@justconnect.com',\n      password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj3GofF5E1SG', // 123456\n      firstName: 'Kadir',\n      lastName: 'Ertan',\n      role: 'admin',\n      status: 'online',\n      isActive: true,\n      isVerified: true,\n      avatar: 'KE',\n      bio: 'JustConnect V2 Geliştiricisi',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    },\n    {\n      username: 'ahmet',\n      email: 'ahmet@justconnect.com',\n      password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj3GofF5E1SG', // 123456\n      firstName: 'Ahmet',\n      lastName: 'Yılmaz',\n      role: 'user',\n      status: 'online',\n      isActive: true,\n      isVerified: true,\n      avatar: 'AY',\n      bio: 'Frontend Developer',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    },\n    {\n      username: 'fatma',\n      email: 'fatma@justconnect.com',\n      password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj3GofF5E1SG', // 123456\n      firstName: 'Fatma',\n      lastName: 'Özkan',\n      role: 'user',\n      status: 'away',\n      isActive: true,\n      isVerified: true,\n      avatar: 'FÖ',\n      bio: 'UI/UX Designer',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  ];\n  \n  try {\n    db.users.insertMany(sampleUsers);\n    print('Sample users created for development');\n  } catch (e) {\n    print('Sample users already exist or error occurred: ' + e.message);\n  }\n}\n\nprint('MongoDB initialization completed successfully!');\nprint('Database: justconnect_v2');\nprint('Collections: users, chats, messages');\nprint('Indexes: Created for optimal performance');\nprint('Ready for JustConnect V2 application!');