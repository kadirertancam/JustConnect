const request = require('supertest');\nconst { app } = require('../server/server');\nconst bcrypt = require('bcryptjs');\n\ndescribe('Authentication Endpoints', () => {\n    let server;\n    \n    beforeAll(async () => {\n        // Start test server\n        server = app.listen(0);\n    });\n    \n    afterAll(async () => {\n        // Close test server\n        if (server) {\n            await server.close();\n        }\n    });\n    \n    describe('POST /api/auth/register', () => {\n        it('should register a new user successfully', async () => {\n            const userData = {\n                username: 'testuser',\n                email: 'test@example.com',\n                password: 'Test123!',\n                firstName: 'Test',\n                lastName: 'User'\n            };\n            \n            const response = await request(app)\n                .post('/api/auth/register')\n                .send(userData)\n                .expect(201);\n            \n            expect(response.body.success).toBe(true);\n            expect(response.body.user).toBeDefined();\n            expect(response.body.user.username).toBe(userData.username);\n            expect(response.body.user.email).toBe(userData.email);\n            expect(response.body.user.tokens).toBeDefined();\n            expect(response.body.user.tokens.accessToken).toBeDefined();\n        });\n        \n        it('should not register user with invalid email', async () => {\n            const userData = {\n                username: 'testuser2',\n                email: 'invalid-email',\n                password: 'Test123!'\n            };\n            \n            const response = await request(app)\n                .post('/api/auth/register')\n                .send(userData)\n                .expect(400);\n            \n            expect(response.body.success).toBe(false);\n            expect(response.body.error.type).toBe('VALIDATION_ERROR');\n        });\n        \n        it('should not register user with weak password', async () => {\n            const userData = {\n                username: 'testuser3',\n                email: 'test3@example.com',\n                password: '123'\n            };\n            \n            const response = await request(app)\n                .post('/api/auth/register')\n                .send(userData)\n                .expect(400);\n            \n            expect(response.body.success).toBe(false);\n            expect(response.body.error.type).toBe('VALIDATION_ERROR');\n        });\n        \n        it('should not register user with existing username', async () => {\n            const userData = {\n                username: 'testuser',\n                email: 'test4@example.com',\n                password: 'Test123!'\n            };\n            \n            const response = await request(app)\n                .post('/api/auth/register')\n                .send(userData)\n                .expect(400);\n            \n            expect(response.body.success).toBe(false);\n            expect(response.body.error.type).toBe('USER_ALREADY_EXISTS');\n        });\n    });\n    \n    describe('POST /api/auth/login', () => {\n        beforeAll(async () => {\n            // Ensure test user exists\n            const userData = {\n                username: 'logintest',\n                email: 'logintest@example.com',\n                password: 'Test123!'\n            };\n            \n            await request(app)\n                .post('/api/auth/register')\n                .send(userData);\n        });\n        \n        it('should login with valid credentials', async () => {\n            const loginData = {\n                username: 'logintest',\n                password: 'Test123!'\n            };\n            \n            const response = await request(app)\n                .post('/api/auth/login')\n                .send(loginData)\n                .expect(200);\n            \n            expect(response.body.success).toBe(true);\n            expect(response.body.user).toBeDefined();\n            expect(response.body.user.tokens).toBeDefined();\n            expect(response.body.user.tokens.accessToken).toBeDefined();\n        });\n        \n        it('should login with email instead of username', async () => {\n            const loginData = {\n                username: 'logintest@example.com',\n                password: 'Test123!'\n            };\n            \n            const response = await request(app)\n                .post('/api/auth/login')\n                .send(loginData)\n                .expect(200);\n            \n            expect(response.body.success).toBe(true);\n        });\n        \n        it('should not login with invalid password', async () => {\n            const loginData = {\n                username: 'logintest',\n                password: 'wrongpassword'\n            };\n            \n            const response = await request(app)\n                .post('/api/auth/login')\n                .send(loginData)\n                .expect(401);\n            \n            expect(response.body.success).toBe(false);\n            expect(response.body.error.type).toBe('INVALID_CREDENTIALS');\n        });\n        \n        it('should not login with non-existent user', async () => {\n            const loginData = {\n                username: 'nonexistent',\n                password: 'Test123!'\n            };\n            \n            const response = await request(app)\n                .post('/api/auth/login')\n                .send(loginData)\n                .expect(401);\n            \n            expect(response.body.success).toBe(false);\n            expect(response.body.error.type).toBe('INVALID_CREDENTIALS');\n        });\n    });\n    \n    describe('GET /api/auth/me', () => {\n        let authToken;\n        \n        beforeAll(async () => {\n            // Register and login to get token\n            const userData = {\n                username: 'metest',\n                email: 'metest@example.com',\n                password: 'Test123!'\n            };\n            \n            const registerResponse = await request(app)\n                .post('/api/auth/register')\n                .send(userData);\n            \n            authToken = registerResponse.body.user.tokens.accessToken;\n        });\n        \n        it('should get current user with valid token', async () => {\n            const response = await request(app)\n                .get('/api/auth/me')\n                .set('Authorization', `Bearer ${authToken}`)\n                .expect(200);\n            \n            expect(response.body.success).toBe(true);\n            expect(response.body.user).toBeDefined();\n            expect(response.body.user.username).toBe('metest');\n        });\n        \n        it('should not get user without token', async () => {\n            const response = await request(app)\n                .get('/api/auth/me')\n                .expect(401);\n            \n            expect(response.body.success).toBe(false);\n            expect(response.body.error.type).toBe('UNAUTHORIZED');\n        });\n        \n        it('should not get user with invalid token', async () => {\n            const response = await request(app)\n                .get('/api/auth/me')\n                .set('Authorization', 'Bearer invalid-token')\n                .expect(403);\n            \n            expect(response.body.success).toBe(false);\n            expect(response.body.error.type).toBe('INVALID_TOKEN');\n        });\n    });\n    \n    describe('POST /api/auth/logout', () => {\n        let authToken;\n        \n        beforeAll(async () => {\n            // Register and login to get token\n            const userData = {\n                username: 'logouttest',\n                email: 'logouttest@example.com',\n                password: 'Test123!'\n            };\n            \n            const registerResponse = await request(app)\n                .post('/api/auth/register')\n                .send(userData);\n            \n            authToken = registerResponse.body.user.tokens.accessToken;\n        });\n        \n        it('should logout successfully with valid token', async () => {\n            const response = await request(app)\n                .post('/api/auth/logout')\n                .set('Authorization', `Bearer ${authToken}`)\n                .expect(200);\n            \n            expect(response.body.success).toBe(true);\n            expect(response.body.message).toBe('Çıkış başarılı');\n        });\n        \n        it('should not logout without token', async () => {\n            const response = await request(app)\n                .post('/api/auth/logout')\n                .expect(401);\n            \n            expect(response.body.success).toBe(false);\n        });\n    });\n    \n    describe('PUT /api/auth/password', () => {\n        let authToken;\n        \n        beforeAll(async () => {\n            // Register and login to get token\n            const userData = {\n                username: 'passwordtest',\n                email: 'passwordtest@example.com',\n                password: 'Test123!'\n            };\n            \n            const registerResponse = await request(app)\n                .post('/api/auth/register')\n                .send(userData);\n            \n            authToken = registerResponse.body.user.tokens.accessToken;\n        });\n        \n        it('should change password with valid data', async () => {\n            const passwordData = {\n                currentPassword: 'Test123!',\n                newPassword: 'NewTest123!',\n                confirmPassword: 'NewTest123!'\n            };\n            \n            const response = await request(app)\n                .put('/api/auth/password')\n                .set('Authorization', `Bearer ${authToken}`)\n                .send(passwordData)\n                .expect(200);\n            \n            expect(response.body.success).toBe(true);\n            expect(response.body.message).toBe('Şifre başarıyla değiştirildi');\n        });\n        \n        it('should not change password with wrong current password', async () => {\n            const passwordData = {\n                currentPassword: 'WrongPassword',\n                newPassword: 'NewTest123!',\n                confirmPassword: 'NewTest123!'\n            };\n            \n            const response = await request(app)\n                .put('/api/auth/password')\n                .set('Authorization', `Bearer ${authToken}`)\n                .send(passwordData)\n                .expect(400);\n            \n            expect(response.body.success).toBe(false);\n            expect(response.body.error.type).toBe('INVALID_CURRENT_PASSWORD');\n        });\n        \n        it('should not change password with mismatched confirmation', async () => {\n            const passwordData = {\n                currentPassword: 'NewTest123!',\n                newPassword: 'AnotherTest123!',\n                confirmPassword: 'DifferentPassword'\n            };\n            \n            const response = await request(app)\n                .put('/api/auth/password')\n                .set('Authorization', `Bearer ${authToken}`)\n                .send(passwordData)\n                .expect(400);\n            \n            expect(response.body.success).toBe(false);\n            expect(response.body.error.type).toBe('VALIDATION_ERROR');\n        });\n    });\n});\n\ndescribe('API Status Endpoints', () => {\n    it('should return API status', async () => {\n        const response = await request(app)\n            .get('/api/status')\n            .expect(200);\n        \n        expect(response.body.success).toBe(true);\n        expect(response.body.message).toBe('JustConnect V2 API is running');\n        expect(response.body.version).toBe('2.0.0');\n        expect(response.body.features).toBeDefined();\n    });\n    \n    it('should return health check', async () => {\n        const response = await request(app)\n            .get('/health')\n            .expect(200);\n        \n        expect(response.body.status).toBe('OK');\n        expect(response.body.uptime).toBeDefined();\n        expect(response.body.memory).toBeDefined();\n    });\n});